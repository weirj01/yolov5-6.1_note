# YOLOv5 🚀 by Ultralytics, GPL-3.0 license

# Parameters
nc: 80  # number of classes 类别数量
depth_multiple: 0.33  # model depth multiple 模型深度乘数，用于调整模型层数。值为0.33表示YOLOv5s的深度是基准模型的0.33倍。
width_multiple: 0.50  # layer channel multiple  层通道乘数，用于调整每一层的通道数。值为0.50表示YOLOv5s的宽度是基准模型的0.5倍。
# 2、先验框配置
# anchors。 为何没有P1 P2？ P3下采样倍数大，应该是检测大目标？
anchors: # 9个anchor，其中P表示特征图的层级，P3/8该层特征图缩放为1/8,是第3层特征
  - [10,13, 16,30, 33,23]  # P3/8 FPN接主干网络下采样8倍后的anchor大小,检测小目标,10,13是一组尺寸，总共三组检测小目标
  - [30,61, 62,45, 59,119]  # P4/16 FPN接主干网络下采样4倍后的anchor大小,检测中目标，共三组
  - [116,90, 156,198, 373,326]  # P5/32 FPN接主干网络下采样2倍后的anchor大小,检测大目标，共三组

# YOLOv5 v6.0 backbone
backbone:
  # from：当前模块输入来自哪一层的输出，-1表示来自上一层；number：模块重复次数，实际次数要乘depth_multiple
  # module：模块名称，有Conv、C3、SPPF等；  args：模块参数
  # [from, number, module, args]
  [[-1, 1, Conv, [64, 6, 2, 2]],  # 0-P1/2  args：64通道(卷积核数量64)，卷积核大小6，步长2，padding 2。输出图片320*320*64
   [-1, 1, Conv, [128, 3, 2]],  # 1-P2/4  rgs：128通道，卷积核大小3，步长2，无padding？ 输出图片160*160*128
   [-1, 3, C3, [128]],                   #rgs：128通道     输出图片160*160*128
   [-1, 1, Conv, [256, 3, 2]],  # 3-P3/8 输出图片80*80*256
   [-1, 6, C3, [256]],
   [-1, 1, Conv, [512, 3, 2]],  # 5-P4/16 输出图片40*40*512
   [-1, 9, C3, [512]],
   [-1, 1, Conv, [1024, 3, 2]],  # 7-P5/32 输出图片20*20*1024
   [-1, 3, C3, [1024]],
   [-1, 1, SPPF, [1024, 5]],  # 9
  ]

# YOLOv5 v6.0 head
head:
  [[-1, 1, Conv, [512, 1, 1]], # 10 输出64通道，卷积核大小1，步长1 
  # nn.upsample不改变channel但是会把图片宽和高都变为2倍
   [-1, 1, nn.Upsample, [None, 2, 'nearest']],  #通道为None？  输出40*40*512
   # 前一模块Upsample的输出 与上面backbone中的 P4阶段的最后一个输出(第6层)做一个concat 
   # 进行concat的两层必须大小相同、通道数相同 concat之后通道翻倍
   [[-1, 6], 1, Concat, [1]],  # cat backbone P4
   [-1, 3, C3, [512, False]],  # 13   False？？

   [-1, 1, Conv, [256, 1, 1]],
   [-1, 1, nn.Upsample, [None, 2, 'nearest']],
   [[-1, 4], 1, Concat, [1]],  # cat backbone P3
   [-1, 3, C3, [256, False]],  # 17 (P3/8-small)  输出80*80*256

   [-1, 1, Conv, [256, 3, 2]],
   [[-1, 14], 1, Concat, [1]],  # cat head P4
   [-1, 3, C3, [512, False]],  # 20 (P4/16-medium)  输出40*40*512

   [-1, 1, Conv, [512, 3, 2]],
   [[-1, 10], 1, Concat, [1]],  # cat head P5
   [-1, 3, C3, [1024, False]],  # 23 (P5/32-large)  输出20*20*1024

   [[17, 20, 23], 1, Detect, [nc, anchors]],  # Detect(P3, P4, P5)
  ]
